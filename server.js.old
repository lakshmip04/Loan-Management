const express = require("express");
const createCsvWriter = require('csv-writer').createObjectCsvWriter;
const createCsvStringifier = require('csv-writer').createObjectCsvStringifier;
const PDFDocument = require('pdfkit');
const jwt = require('jsonwebtoken');
const { google } = require("googleapis");
const session = require("express-session");
const cookieParser = require('cookie-parser');
const mongoose = require("mongoose");
const ExcelJS = require('exceljs');
const moment = require('moment');
const path = require("path");
const ejs = require('ejs');
const axios = require('axios');
const { Document, Packer, Paragraph, TextRun, Table, TableRow, TableCell } = require("docx");
const fs = require("fs");
const { Readable } = require("stream");
const cors = require('cors');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

// Import middleware
const { authenticateToken, authorize, hasPermission } = require('./middleware/auth');
const { authRateLimit, apiRateLimit, uploadRateLimit } = require('./middleware/rateLimiter');
const { upload, handleUploadError, cleanupOnError } = require('./middleware/upload');

// Import models
const pendingLoanModel = require("./models/pendingloan");
const verifiedLoanModel = require("./models/verifiedloan");
const emiListnModel = require("./models/emiList");
const pendingColnModel = require("./models/pendingcollection");
const verifiedColnModel = require("./models/verifiedcollection");
const staffAccountModel = require("./models/staffAccount");
const ceoAccountModel = require("./models/ceoAccount");
const cashierAccountModel = require("./models/cashierAccount");
const managerAccountModel = require("./models/managerAccount");
const bankAccountModel = require("./models/bankAccount");
const easyfarmAccountModel = require("./models/easyfarmAccount");
const rejectLoanModel = require("./models/rejectedloan");
const rejectColnModel = require("./models/rejectcollection");
const pendingtExpModel = require("./models/pendingExpense");
const verifiedExpModel = require("./models/verifiedExpense");
const rejectedExpModel = require("./models/rejectedExpense");
const verifiedTotalModel = require("./models/verifiedTotal");
const pendingTotalModel = require("./models/pendingTotal");
const depositAccountModel = require("./models/depositAccount");
const loanCashAccountModel = require("./models/loanCashAccount");
const customerAccountModel = require("./models/customerAccount");
const groupAccountModel = require("./models/groupAccount");
const goldAccountModel = require("./models/goldRate");
const totalSheetModel = require("./models/totalSheet");
const extraCharges = require("./models/extraFine");

// Import routes
const authRoutes = require('./routes/auth');
const loanRoutes = require('./routes/loans');

const app = express();
const port = process.env.PORT || 5001;

// MongoDB Connection
mongoose.connect(process.env.MONGODB_URI || "mongodb+srv://easyfin:l2K0DGqUzFQuJVvi@cluster0.nkscgys.mongodb.net/easyfin", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log("MongoDB connected successfully"))
.catch((err) => console.error("MongoDB connection error:", err));

// CORS configuration
const corsOptions = {
  origin: process.env.NODE_ENV === 'production' 
    ? process.env.ALLOWED_ORIGINS?.split(',') 
    : ['http://localhost:3000', 'http://localhost:3001'],
  credentials: true,
  optionsSuccessStatus: 200
};

// Middleware
app.use(cors(corsOptions));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(cookieParser());
app.use(session({ 
  secret: process.env.SESSION_SECRET || "your-secret-key",
  resave: false,
  saveUninitialized: true,
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    maxAge: 24 * 60 * 60 * 1000 // 24 hours
  }
}));

// Serve static files
app.use(express.static(path.join(__dirname, "ui")));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Cache control
app.use((req, res, next) => {
  res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
  res.setHeader('Pragma', 'no-cache');
  res.setHeader('Expires', '0');
  next();
});

// Routes with middleware
app.use('/api/auth', [authRateLimit], authRoutes);
app.use('/api/loans', [
  apiRateLimit,
  authenticateToken,
  authorize(['staff', 'manager', 'cashier', 'ceo'])
], loanRoutes);

// File upload routes
app.post('/api/upload/:type', [
  uploadRateLimit,
  authenticateToken,
  upload.array('files', 5),
  handleUploadError,
  cleanupOnError
], (req, res) => {
  const files = req.files.map(file => ({
    filename: file.filename,
    path: file.path,
    size: file.size,
    mimetype: file.mimetype
  }));
  
  res.json({ files });
});

// API Routes
// Members API
app.get('/api/members', async (req, res) => {
  try {
    const members = await Member.find();
    res.json(members);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

app.get('/api/members/:id', async (req, res) => {
  try {
    const member = await Member.findOne({ memberID: req.params.id });
    if (!member) {
      return res.status(404).json({ message: 'Member not found' });
    }
    res.json(member);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

app.post('/api/members', async (req, res) => {
  const member = new Member(req.body);
  try {
    const newMember = await member.save();
    res.status(201).json(newMember);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Loans API
app.get('/api/loans', async (req, res) => {
  try {
    const loans = await Loan.find();
    res.json(loans);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

app.get('/api/loans/:id', async (req, res) => {
  try {
    const loan = await Loan.findOne({ loanID: req.params.id });
    if (!loan) {
      return res.status(404).json({ message: 'Loan not found' });
    }
    
    // Get member details
    const member = await Member.findOne({ memberID: loan.memberID });
    
    // Get payment history
    const payments = await Payment.find({ loanID: req.params.id }).sort({ date: -1 });
    
    // Format the response
    const response = {
      ...loan.toObject(),
      memberName: member ? member.name : 'Unknown Member',
      payments: payments.map(payment => ({
        date: payment.date,
        amount: payment.amount,
        status: payment.status,
        paymentMethod: payment.paymentMethod,
        transactionID: payment.transactionID,
        remarks: payment.remarks
      }))
    };
    
    res.json(response);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

app.get('/api/loans/member/:memberID', async (req, res) => {
  try {
    const loans = await Loan.find({ memberID: req.params.memberID });
    res.json(loans);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

app.post('/api/loans', async (req, res) => {
  const loan = new Loan(req.body);
  try {
    const newLoan = await loan.save();
    res.status(201).json(newLoan);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Catch-all route to serve the frontend
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// Routes will be added here
// TODO: Add your routes

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ 
    message: 'Something went wrong!',
    error: process.env.NODE_ENV === 'development' ? err.message : undefined
  });
});

// Handle 404
app.use((req, res) => {
  res.status(404).json({ message: 'Route not found' });
});

// Start server
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
  
  // Create required directories
  const dirs = [
    'uploads',
    'uploads/loan-documents',
    'uploads/customer-documents',
    'uploads/expense-receipts',
    'uploads/others'
  ];
  
  dirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  });
}); 